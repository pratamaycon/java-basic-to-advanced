package br.com.maycon.model.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import br.com.maycon.jdbc.DB;
import br.com.maycon.jdbc.exception.DBException;
import br.com.maycon.model.dao.SellerDao;
import br.com.maycon.model.entities.Department;
import br.com.maycon.model.entities.Seller;

public class SellerDaoJDBC implements SellerDao {
	
	private Connection conn;
	
	public SellerDaoJDBC(Connection conn) {
		this.conn = conn;
	}

	@Override
	public void insert(Seller department) {
		PreparedStatement st = null;
		try {
			st = conn.prepareStatement(
					"insert into seller " +
					"(name, email, birthDate, baseSalary, department_id) " +
					"values " +
					"(?, ?, ?, ?, ?, ?)");
		} catch (Exception e) {
			// TODO: handle exception
		}
		
	}

	@Override
	public void update(Seller department) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void deleteById(Integer id) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public Seller findById(Integer id) {
		
		PreparedStatement st = null;
		ResultSet rs = null;		
		try {
			st = conn.prepareStatement(
					"SELECT seller.*, department.name as DepName " + 
					"from  seller inner join department " + 
					"on seller.department_id = department.id " + 
					"Where seller.id = ?"
					);
			st.setInt(1, id);
			rs = st.executeQuery();
			while (rs.next()) {
				Department dep = instantiateDepartment(rs);
				Seller seller = instantiateSeller(rs, dep);
				
				return seller;
				
			}
			return null;
		} catch (SQLException e) {
			throw new DBException(e.getMessage());
		} finally {
			DB.closeStatement(st);
			DB.closeResultSet(rs);
		}
		
		
	}

	private Seller instantiateSeller(ResultSet rs, Department dep) throws SQLException {
		Seller seller = new Seller();
		seller.setId(rs.getInt("id"));
		seller.setName(rs.getString("name"));
		seller.setEmail(rs.getString("email"));
		seller.setBaseSalary(rs.getDouble("baseSalary"));
		seller.setBirthDate(rs.getDate("birthDate"));
		seller.setDepartment(dep);
		return seller;
	}

	private Department instantiateDepartment(ResultSet rs) throws SQLException {
		Department dep = new Department();
		dep.setId(rs.getInt("department_id"));
		dep.setNome(rs.getString("DepName"));
		
		return dep;
	}

	@Override
	public List<Seller> findAll() {
		PreparedStatement st = null;
		ResultSet rs = null;		
		try {
			st = conn.prepareStatement(
					"SELECT seller.*, department.name as DepName " + 
					"from seller inner join department " + 
					"on seller.department_id = department.id " + 
					"order by name");
			
			rs = st.executeQuery();
			
			List<Seller> sellers = new ArrayList<Seller>();
			Map<Integer, Department> map =  new HashMap<>();
			
			while (rs.next()) {
				Department dep = map.get(rs.getInt("department_id"));
				
				if (dep ==  null) {
					dep = instantiateDepartment(rs);
					map.put(rs.getInt("department_id"), dep);
				}
				
				Seller seller = instantiateSeller(rs, dep);
				sellers.add(seller);
				
			}
			return sellers;
		} catch (SQLException e) {
			throw new DBException(e.getMessage());
		} finally {
			DB.closeStatement(st);
			DB.closeResultSet(rs);
		}
	}

	@Override
	public List<Seller> findByDepartment(Department department) {
		PreparedStatement st = null;
		ResultSet rs = null;		
		try {
			st = conn.prepareStatement(
					"SELECT seller.*, department.name as DepName " + 
					"from seller inner join department " + 
					"on seller.department_id = department.id " + 
					"where department.id = ? " + 
					"order by name");
			st.setInt(1, department.getId());
			rs = st.executeQuery();
			
			List<Seller> sellers = new ArrayList<Seller>();
			Map<Integer, Department> map =  new HashMap<>();
			
			while (rs.next()) {
				Department dep = map.get(rs.getInt("department_id"));
				
				if (dep ==  null) {
					dep = instantiateDepartment(rs);
					map.put(rs.getInt("department_id"), dep);
				}
				
				Seller seller = instantiateSeller(rs, dep);
				sellers.add(seller);
				
			}
			return sellers;
		} catch (SQLException e) {
			throw new DBException(e.getMessage());
		} finally {
			DB.closeStatement(st);
			DB.closeResultSet(rs);
		}
	}

}
